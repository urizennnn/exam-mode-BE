name: Deploy

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  IMAGE_NAME: exam-mode-be
  REMOTE_HOST: ec2-44-216-249-21.compute-1.amazonaws.com
  REMOTE_USER: ubuntu
  REMOTE_DIR: ~/exam-mode-be

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Write SSH key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "$SSH_KEY" > docenti_main.pem
          chmod 600 docenti_main.pem

      - name: Ensure remote directory exists
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            ${REMOTE_USER}@${REMOTE_HOST} \
            "mkdir -p ${REMOTE_DIR}"

      - name: Determine blue/green target
        id: colours
        env:
          SSH: ${{ format('{0}@{1}', env.REMOTE_USER, env.REMOTE_HOST) }}
        run: |
          ACTIVE=$(ssh -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            "$SSH" \
            "if [ -f ${REMOTE_DIR}/active-color ]; then cat ${REMOTE_DIR}/active-color; else echo none; fi")

          if [ "$ACTIVE" = "blue" ]; then
            NEXT=green
          else
            NEXT=blue
          fi

          echo "active=$ACTIVE" >> "$GITHUB_OUTPUT"
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"

      - name: Copy docker-compose definition
        run: |
          scp -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            docker-compose.yml \
            ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/docker-compose.yml

      - name: Sync Traefik configuration
        run: |
          scp -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            -r traefik \
            ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/

      - name: Sync application source code
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            ${REMOTE_USER}@${REMOTE_HOST} \
            "rm -rf ${REMOTE_DIR}/src"

          scp -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            -r src package.json yarn.lock tsconfig.json nest-cli.json Dockerfile .dockerignore \
            ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/

      - name: Deploy with Docker Compose
        env:
          TAG: ${{ github.sha }}
          NEXT: ${{ steps.colours.outputs.next }}
          ACTIVE: ${{ steps.colours.outputs.active }}
        run: |
          ssh -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            ${REMOTE_USER}@${REMOTE_HOST} \
            "cd ${REMOTE_DIR} && IMAGE_TAG=${TAG} docker compose --profile ${NEXT} build app-${NEXT} && docker compose --profile ${NEXT} up -d traefik app-${NEXT}"

          ssh -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            ${REMOTE_USER}@${REMOTE_HOST} \
            'for i in $(seq 1 40); do STATUS=$(docker inspect -f "{{.State.Health.Status}}" exam-mode-be-'"${NEXT}"' 2>/dev/null || echo starting); if [ "$STATUS" = "healthy" ]; then exit 0; fi; if [ "$STATUS" = "unhealthy" ]; then echo "Container reported unhealthy status" >&2; exit 1; fi; sleep 3; done; echo "Timed out waiting for exam-mode-be-'"${NEXT}"' to become healthy" >&2; exit 1'

          ssh -o StrictHostKeyChecking=no \
            -i docenti_main.pem \
            ${REMOTE_USER}@${REMOTE_HOST} \
            "cd ${REMOTE_DIR} && sed 's/__ACTIVE_COLOR__/${NEXT}/g' traefik/dynamic.yml.tpl > traefik/dynamic.yml && echo ${NEXT} > active-color"

          if [ "${ACTIVE}" != "none" ]; then
            ssh -o StrictHostKeyChecking=no \
              -i docenti_main.pem \
              ${REMOTE_USER}@${REMOTE_HOST} \
              "cd ${REMOTE_DIR} && docker compose --profile ${ACTIVE} stop app-${ACTIVE} && docker compose rm -f app-${ACTIVE}"
          fi

      - name: Cleanup SSH key
        if: always()
        run: rm -f docenti_main.pem
